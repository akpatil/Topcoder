#include <iostream>
#include <sstream>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
using namespace std;

class LargestCircle
        {
        public:
        int radius(vector <string> grid)
            {
                int w = grid[0].size(), h = grid.size();
                int m = min(w, h);
                for(int r = m/2; r >= 1; r--)
                    for(int a = r; a <= h-r; a++){
                        for(int b = r; b <= w-r; b++){
//                            cout<<r<<" "<<a<<" "<<b<<endl;
                            bool flag = true;
                            for(int x = a-r; x < a+r && flag; x++)
                                for(int y = b-r; y < b+r && flag; y++)
                                if(!(((x-a)*(x-a)+(y-b)*(y-b) <= r*r && (x-a+1)*(x-a+1)+(y-b)*(y-b) <= r*r && (x-a)*(x-a)+(y-b+1)*(y-b+1) <= r*r && (x-a+1)*(x-a+1)+(y-b+1)*(y-b+1) <= r*r) ||
                                     ((x-a)*(x-a)+(y-b)*(y-b) >= r*r && (x-a+1)*(x-a+1)+(y-b)*(y-b) >= r*r && (x-a)*(x-a)+(y-b+1)*(y-b+1) >= r*r && (x-a+1)*(x-a+1)+(y-b+1)*(y-b+1) >= r*r))){
                                   if(grid[x][y] == '#')
                                        flag = false;
//                                   else cout<<a<<" "<<b<<" "<<x<<" "<<y<<" "<<r<<endl;
                                }
                            if(flag) return r;
                        }
                    }
                    return 0;
            }

// BEGIN CUT HERE
	public:
	void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); if ((Case == -1) || (Case == 4)) test_case_4(); if ((Case == -1) || (Case == 5)) test_case_5(); if ((Case == -1) || (Case == 6)) test_case_6(); }
	private:
	template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
	void verify_case(int Case, const int &Expected, const int &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }
	void test_case_0() { string Arr0[] = { "####",
  "#..#",
  "#..#",
  "####" }; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 1; verify_case(0, Arg1, radius(Arg0)); }
	void test_case_1() { string Arr0[] = { "############",
  "###......###",
  "##.######.##",
  "#.########.#",
  "#.##..####.#",
  "#.##..####.#",
  "#.########.#",
  "#.########.#",
  "#.########.#",
  "##.######.##",
  "###......###",
  "############" }; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 5; verify_case(1, Arg1, radius(Arg0)); }
	void test_case_2() { string Arr0[] = { ".........." }; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 0; verify_case(2, Arg1, radius(Arg0)); }
	void test_case_3() { string Arr0[] = { "#######",
  "#######",
  "#######",
  "#######",
  "#######" }; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 0; verify_case(3, Arg1, radius(Arg0)); }
	void test_case_4() { string Arr0[] = { "#####.......",
  "#####.......",
  "#####.......",
  "............",
  "............",
  "............",
  "............",
  "............",
  "............",
  "............" }; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 4; verify_case(4, Arg1, radius(Arg0)); }
	void test_case_5() { string Arr0[] = { "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.",
  "...#...#...#...#...#...#...#...#...#...#...#...#..",
  "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.",
  ".#...#...#...#...#...#...#...#...#...#...#...#...#",
  "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.",
  "...#...#...#...#...#...#...#...#...#...#...#...#..",
  "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.",
  ".#...#...#...#...#...#...#...#...#...#...#...#...#",
  "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.",
  "...#...#...#...#...#...#...#...#...#...#...#...#.#",
  "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#." }
; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 0; verify_case(5, Arg1, radius(Arg0)); }
	void test_case_6() { string Arr0[] = { ".........................#........................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  "..................................................",
  ".................................................." }
; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 24; verify_case(6, Arg1, radius(Arg0)); }

// END CUT HERE

        };

// BEGIN CUT HERE
     int main()
     {
        LargestCircle ___test;
        ___test.run_test(-1);
     }
// END CUT HERE
